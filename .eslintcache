[{"F:\\IT\\Sofware Methods\\solidapp\\src\\index.js":"1","F:\\IT\\Sofware Methods\\solidapp\\src\\reportWebVitals.js":"2","F:\\IT\\Sofware Methods\\solidapp\\src\\App.js":"3","F:\\IT\\Sofware Methods\\solidapp\\src\\ItemList.js":"4","F:\\IT\\Sofware Methods\\solidapp\\src\\Result.js":"5","F:\\IT\\Sofware Methods\\solidapp\\src\\utils.js":"6","F:\\IT\\Sofware Methods\\solidapp\\src\\Item.js":"7","F:\\IT\\Sofware Methods\\solidapp\\src\\FoldersTree.js":"8"},{"size":500,"mtime":1609431978000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1609431978000,"results":"11","hashOfConfig":"10"},{"size":9277,"mtime":1610604072000,"results":"12","hashOfConfig":"10"},{"size":394,"mtime":1610519834000,"results":"13","hashOfConfig":"10"},{"size":2527,"mtime":1610604337000,"results":"14","hashOfConfig":"10"},{"size":2576,"mtime":1610604268000,"results":"15","hashOfConfig":"10"},{"size":1667,"mtime":1610604128000,"results":"16","hashOfConfig":"10"},{"size":1719,"mtime":1610604099000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"walh0h",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"F:\\IT\\Sofware Methods\\solidapp\\src\\index.js",[],["38","39"],"F:\\IT\\Sofware Methods\\solidapp\\src\\reportWebVitals.js",[],"F:\\IT\\Sofware Methods\\solidapp\\src\\App.js",["40"],"import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Input,\n  Backdrop,\n  CircularProgress,\n  InputLabel,\n  InputAdornment,\n  Select,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport {\n  PlayArrow,\n  RestoreFromTrash,\n} from \"@material-ui/icons\";\nimport ItemList from \"./ItemList\";\nimport Result from \"./Result\";\nimport { fetchDocument } from \"tripledoc\";\nimport { foaf } from \"rdf-namespaces\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport {\n  SolidModal\n} from \"./utils\";\nconst auth = require(\"solid-auth-client\");\n\nconst FC = require(\"solid-file-client\");\nconst fc = new FC(auth);\n\nasync function getCurrentSession() {\n  let session = await auth.currentSession();\n  return session;\n}\n\nfunction App() {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [errorArr, setErrorArr] = useState([]);\n  const [noErrorArr, setNoErrorArr] = useState([]);\n  const [selectedTab, setSelectedTab] = useState(0);\n\n  const [webId, setWebId] = useState(undefined);\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [isLoadFromLocal, setLoadFromLocal] = useState(true);\n\n  const [userName, setUserName] = useState(undefined);\n  const [distance, setDistance] = useState(1);\n\n  const onChangeHandler = (event) => {\n    setSelectedFiles([...selectedFiles, ...event.target.files]);\n  };\n  const getUserName = async (webId) => {\n    const profileDoc = await fetchDocument(webId);\n    const profile = profileDoc.getSubject(webId);\n    const name = profile.getString(foaf.name);\n\n    return name;\n  };\n  const getRootUrl = (webId) => webId && webId.split(\"/\").slice(0, 3).join(\"/\");\n\n  const handleLogin = async () => {\n    const session = await auth.popupLogin({ popupUri: \"popup.html\" });\n\n    if (session?.webId) {\n      setWebId(session.webId);\n    }\n  };\n\n  const handleUpdateUserInfo = async (webId) => {\n    const name = await getUserName(webId);\n    setUserName(name);\n  };\n\n  const handleLogout = async () => {\n    await logout();\n    setWebId(undefined);\n  };\n\n  const handleGetCurrentSession = async () => {\n    const cachedSession = await getCurrentSession();\n\n    if (cachedSession) {\n      setWebId(cachedSession.webId);\n    }\n  };\n\n  useEffect(() => {\n    handleGetCurrentSession();\n  }, []);\n\n  useEffect(() => {\n    if (webId) {\n      handleUpdateUserInfo(webId);\n    }\n  }, [webId]);\n\n  const onClickHandler = () => {\n    const data = new FormData();\n    setErrorArr([]);\n    setNoErrorArr([]);\n    for (let index = 0; index < selectedFiles.length; index++) {\n      data.append(\"file\", selectedFiles[index]);\n    }\n    setOpen(true);\n    setSelectedTab(1);\n    axios\n      .post(`http://localhost:5000/upfile?distance=${distance}`, data, {})\n      .then((res) => {\n        const { noErrorArr, errorArr } = res.data;\n        const errorFiles = errorArr.map((e) => {\n          const file = new File(\n            [new Blob([Buffer.from(e.file.data)])],\n            e.filename\n          );\n          file.detection = `Number of detected components: ${e.info[1]}`;\n          return file;\n        });\n        const noErrorFiles = noErrorArr.map((e) => {\n          const file = new File(\n            [new Blob([Buffer.from(e.file.data)])],\n            e.filename\n          );\n          file.detection = `Number of detected components: ${e.info[1]}`;\n          return file;\n        });\n        setNoErrorArr([...noErrorFiles]);\n        setErrorArr([...errorFiles]);\n      })\n      .catch((error) => {\n        console.log(error);\n        setSelectedTab(0);\n      })\n      .then(() => {\n        setOpen(false);\n      });\n  };\n\n  const logout = () => {\n    return auth.logout();\n  };\n\n  return (\n    <div className=\"App\">\n      <Backdrop style={{ zIndex: 9999 }} open={open}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <div>\n        {webId ? (\n          <div>\n            <div className=\"nav-info\">\n              <Typography style={{ marginRight: \"20px\" }} color=\"secondary\">\n                Welcome back, {userName}\n              </Typography>\n              <Button\n                className=\"nav-name\"\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={handleLogout}\n              >\n                Logout\n              </Button>\n            </div>\n\n            <Tabs\n              selectedIndex={selectedTab}\n              onSelect={(number) => setSelectedTab(number)}\n            >\n              <TabList>\n                <Tab>Input</Tab>\n                <Tab>Output</Tab>\n              </TabList>\n\n              <TabPanel>\n                <div className=\"nav\">\n                  <SolidModal\n                    rootUrl={getRootUrl(webId)}\n                    isModalOpen={isModalOpen}\n                    modalClose={() => setModalOpen(false)}\n                    modalConfirm={async (url) => {\n                      const blob = await fc.readFile(url);\n                      const name = url.substring(\n                        url.lastIndexOf(\"/\") + 1,\n                        url.length\n                      );\n                      console.log(blob);\n                      const file = new File([blob], name);\n\n                      console.log(file);\n                      setSelectedFiles([...selectedFiles, file]);\n                    }}\n                  />\n                  <InputLabel\n                    className=\"nav-e\"\n                    htmlFor=\"standard-adornment-amount\"\n                  >\n                    Distance\n                  </InputLabel>\n                  <Input\n                    id=\"standard-adornment-weight\"\n                    className=\"nav-e\"\n                    style={{ width: \"70px\" }}\n                    value={distance}\n                    onChange={(d) => setDistance(d.target.value)}\n                    endAdornment={\n                      <InputAdornment position=\"end\">mm</InputAdornment>\n                    }\n                    aria-describedby=\"standard-weight-helper-text\"\n                    inputProps={{\n                      \"aria-label\": \"weight\",\n                    }}\n                  />{\" \"}\n                  <input\n                    className=\"nav-e\"\n                    type=\"file\"\n                    id=\"file\"\n                    name=\"file\"\n                    style={{ display: \"none\" }}\n                    multiple\n                    onChange={onChangeHandler}\n                  />\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => setModalOpen(!isLoadFromLocal)}\n                  >\n                    {isLoadFromLocal ? (\n                      <label htmlFor=\"file\">Load File From Local</label>\n                    ) : (\n                      \"Load File From Solid\"\n                    )}\n                  </Button>\n                  <Select\n                    className=\"select-store-file nav-e\"\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={\"\"}\n                    onChange={(event) => {\n                      setLoadFromLocal(event.target.value);\n                    }}\n                  >\n                    <MenuItem value={false}>Load File From Solid</MenuItem>\n                    <MenuItem value={true}>Load File From Local</MenuItem>\n                  </Select>\n                  <Button\n                    type=\"button\"\n                    className=\"btn btn-success btn-block\"\n                    onClick={() => setSelectedFiles([])}\n                    variant=\"contained\"\n                    color=\"primary\"\n                  >\n                    Clear <RestoreFromTrash />\n                  </Button>\n                  <Button\n                    style={{ marginRight: \"10px\", marginLeft: \"auto\" }}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"button\"\n                    className=\"btn btn-success btn-block\"\n                    onClick={onClickHandler}\n                  >\n                    Run <PlayArrow />\n                  </Button>\n                </div>\n\n                <div className=\"body\">\n                  <ItemList\n                    list={selectedFiles}\n                    onDelete={(index) => {\n                      console.log(index);\n                      selectedFiles.splice(index, 1);\n                      console.log(selectedFiles);\n                      setSelectedFiles([...selectedFiles]);\n                    }}\n                  />\n                </div>\n              </TabPanel>\n              <TabPanel>\n                <Result\n                  rootUrl={getRootUrl(webId)}\n                  listFileError={errorArr}\n                  listFileNoError={noErrorArr}\n                />\n              </TabPanel>\n            </Tabs>\n          </div>\n        ) : (\n          <div className=\"nav-login\">\n            <Button variant=\"contained\" color=\"primary\" onClick={handleLogin}>\n              Login to continue\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","F:\\IT\\Sofware Methods\\solidapp\\src\\ItemList.js",[],"F:\\IT\\Sofware Methods\\solidapp\\src\\Result.js",[],"F:\\IT\\Sofware Methods\\solidapp\\src\\utils.js",["41"],"import FoldersTree from \"./FoldersTree\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport Modal from \"react-modal\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport \"./utils.css\";\nconst auth = require(\"solid-auth-client\");\nconst FC = require(\"solid-file-client\");\nconst fc = new FC(auth);\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nexport const getFileStructure = async (url) => {\n  try {\n    if (await fc.itemExists(url)) {\n      const folderData = await fc.readFolder(url, {\n        links: FC.LINKS.EXCLUDE,\n      });\n      return folderData;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return null;\n};\n\nexport const getFoldersForUrl = async (url) => {\n  const fileStructure = await getFileStructure(url);\n\n  const treeNode = {\n    type: \"folder\",\n    access: \"public\",\n    url,\n    children: [\n      ...(await Promise.all(\n        fileStructure?.folders.map((folder) => getFoldersForUrl(folder.url))\n      )),\n      ...fileStructure?.files.map((file) => ({\n        type: \"file\",\n        access: \"public\",\n        url: file.url,\n      })),\n    ],\n  };\n  return treeNode;\n};\n\nexport function SolidModal(props) {\n  const [foldersTree, setFoldersTree] = useState();\n  const [uploadUrl, setUploadUrl] = useState();\n  const [open, setOpen] = useState();\n  const updateFoldersTreeForUrl = async (url) => {\n    const fol = await getFoldersForUrl(url);\n    console.log(fol);\n    setFoldersTree(fol);\n  };\n  useEffect(() => {\n    updateFoldersTreeForUrl(props.rootUrl);\n  }, []);\n\n  return (\n    <Modal\n      style={customStyles}\n      isOpen={props.isModalOpen}\n      onRequestClose={() => props.modalClose()}\n    >\n      <div className=\"solid-modal\">\n        <div className=\"solid-modal-tree\">\n          <FoldersTree\n            foldersTreeItems={foldersTree}\n            onSelectNode={(event, url) => {\n              setUploadUrl(url);\n            }}\n          />\n        </div>\n        <Button\n          className=\"solid-button-confirm\"\n          variant=\"contained\"\n          color=\"secondary\"\n          maxW\n          onClick={() => {\n            setOpen(true);\n            props.modalConfirm(uploadUrl);\n            updateFoldersTreeForUrl(props.rootUrl).then(() => {\n              setOpen(false);\n            });\n          }}\n        >\n          {open ? <CircularProgress color=\"inherit\" /> : \"CONFIRM\"}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n","F:\\IT\\Sofware Methods\\solidapp\\src\\Item.js",[],"F:\\IT\\Sofware Methods\\solidapp\\src\\FoldersTree.js",[],["42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":97,"column":6,"nodeType":"50","endLine":97,"endColumn":13,"suggestions":"51"},{"ruleId":"48","severity":1,"message":"52","line":68,"column":6,"nodeType":"50","endLine":68,"endColumn":8,"suggestions":"53"},{"ruleId":"44","replacedBy":"54"},{"ruleId":"46","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleUpdateUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["58"],"React Hook useEffect has a missing dependency: 'props.rootUrl'. Either include it or remove the dependency array.",["59"],["56"],["57"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [handleUpdateUserInfo, webId]",{"range":"64","text":"65"},"Update the dependencies array to be: [props.rootUrl]",{"range":"66","text":"67"},[2514,2521],"[handleUpdateUserInfo, webId]",[1688,1690],"[props.rootUrl]"]